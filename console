#!/usr/bin/env bash
set -e

# -----------------------------------------------------------------------------
# Load environment variables
# -----------------------------------------------------------------------------

# Set current directory to directory of this script
cd $(cd -P -- "$(dirname -- "$0")" && pwd -P)/docker

if [ "$(uname)" == "Darwin" ]; then
    OS_TYPE="mac"
    DEFAULT_ENV="dev-macos.env"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    OS_TYPE="linux"
    DEFAULT_ENV="dev-linux.env"
else
    echo "Unsupported OS!"
    exit -1
fi

# Copy template file
if ! [[ -f .env ]]; then
    cat $DEFAULT_ENV \
        | grep -v "#" \
        | xargs -n1 -L 1 -I{} sh -c 'echo {}' \
        > .env
fi

# Import environment variables from dotenv
eval $(cat .env \
    | grep -v "#" \
    | sed -E 's/^([^=]*)=(.*)$/export \1="\2"/p')

# -----------------------------------------------------------------------------
# Parse global arguments
# -----------------------------------------------------------------------------

MODE=$1
shift

# -----------------------------------------------------------------------------
# Check dependencies
# -----------------------------------------------------------------------------

if ! type docker &> /dev/null; then
    echo "docker is required to run this script!"
    exit -1
fi

if ! type docker-compose &> /dev/null; then
    echo "docker-compose is required to run this script!"
    exit -1
fi

# -----------------------------------------------------------------------------
# Utils
# -----------------------------------------------------------------------------

function ask()
{
    printf "$@"
    read -p " (y/n) " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]

    return $?
}

function setup_macos_nfs()
{
    if [[ $OS_TYPE != "mac" ]]; then
        return 0
    fi

    if [[ -f .nfs-configured ]]; then
        return 0
    fi

    ask "Do you want setup NFS exports on your machine?"

    if [[ $? != "0" ]]; then
        return 0
    fi

    USER_ID=`id -u`
    GROUP_ID=`id -g`

    NFS_EXPORT_LINE="/Users -alldirs -mapall=${USER_ID}:${GROUP_ID} localhost"
    NFS_EXPORT_FILE=/etc/exports

    NFS_CONF_LINE="nfs.server.mount.require_resv_port = 0"
    NFS_CONF_FILE=/etc/nfs.conf

    [[ -f $NFS_EXPORT_FILE ]] || sudo touch $NFS_EXPORT_FILE
    [[ -f $NFS_CONF_FILE ]]   || sudo touch $NFS_CONF_FILE

    RESTART=0
    if ! grep -qF -- "$NFS_EXPORT_LINE" "$NFS_EXPORT_FILE" || ! grep -qF -- "$NFS_CONF_LINE" "$NFS_CONF_FILE"; then
        RESTART=1
    fi

    if [[ $RESTART == "1" ]]; then
        osascript -e 'quit app "Docker"'

        grep -qF -- "$NFS_EXPORT_LINE" "$NFS_EXPORT_FILE" || sudo echo "$NFS_EXPORT_LINE" | sudo tee -a $NFS_EXPORT_FILE > /dev/null
        grep -qF -- "$NFS_CONF_LINE" "$NFS_CONF_FILE" || sudo echo "$NFS_CONF_LINE" | sudo tee -a $NFS_CONF_FILE > /dev/null

        sudo nfsd restart
        open -a Docker

        while ! docker ps > /dev/null 2>&1 ; do
            sleep 1;
        done
    fi

    touch .nfs-configured
}

# -----------------------------------------------------------------------------
# Commands
# -----------------------------------------------------------------------------

function cmd_compose()
{
    docker-compose ${DOCKER_COMPOSE_ARGS} --project-name ${PROJECT_NAME} "$@"
}

function cmd_start()
{
    setup_macos_nfs
    cmd_compose up -d "$@"
}

function cmd_stop()
{
    cmd_compose stop "$@"
}

function cmd_clean()
{
    cmd_compose down

    for ID in `docker ps -a -q --filter "name=${PROJECT_NAME}_"`; do docker rm -f ${ID}; done
    for ID in `docker images -q "${PROJECT_NAME}_*"`; do docker rmi -f ${ID}; done
    for ID in `docker images -q "*/${PROJECT_NAME}_*"`; do docker rmi -f ${ID}; done
    for ID in `docker volume ls -q --filter "name=${PROJECT_NAME}_"`; do docker volume rm -f ${ID}; done
}

function cmd_bash()
{
    ROOT=0
    USER=app
    SHELL=bash
    while [[ $# > 0 ]]; do
        ARG="$1"

        if [[ $ARG == "-u" ]] || [[ $ARG == "--user" ]]; then
            shift
            USER=$1
        else
            break
        fi

        shift
    done

    APP=$1
    shift

    cmd_compose exec -u $USER $APP $SHELL
}

function cmd_create_project()
{
    mkdir -p $SYMFONY_APP_PATH
    mkdir -p $DATA_PATH

    cmd_stop
    cmd_start php
    cmd_compose exec -u app php composer create-project "$@"

    mkdir -p $WEB_PATH
    cmd_start
}

# -----------------------------------------------------------------------------
# Run commands
# -----------------------------------------------------------------------------

if [[ ${MODE} == "compose" ]]; then
    cmd_compose "$@"
elif [[ ${MODE} == "start" ]]; then
    cmd_start "$@"
elif [[ ${MODE} == "stop" ]]; then
    cmd_stop "$@"
elif [[ ${MODE} == "clean" ]]; then
    cmd_clean
elif [[ ${MODE} == "bash" ]]; then
    cmd_bash "$@"
elif [[ ${MODE} == "create-project" ]]; then
    cmd_create_project "$@"
else
    echo "Usage: $0"
fi
